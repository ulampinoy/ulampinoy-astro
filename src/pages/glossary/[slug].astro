---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const glossaryItems = await getCollection("glossary");
  return glossaryItems.map((item) => ({
    params: { slug: item.slug },
    props: { item },
  }));
}

const { item } = Astro.props;
const { Content } = await item.render();

// Format date for display
const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  return new Date(dateString).toLocaleDateString("en-US", options);
};
---

<BaseLayout title={item.data.title} description={item.data.description}>
  <article class="pt-16">
    {/* Hero Image Section */}
    <div class="relative h-[40vh] sm:h-[50vh] md:h-[60vh]">
      <img
        src={item.data.image || "/images/default-glossary.jpg"}
        alt={item.data.title}
        class="w-full h-full object-cover"
      />
      <div
        class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"
      >
        <div
          class="container mx-auto max-w-[90ch] px-8 h-full w-full flex flex-col justify-end pb-16"
        >
          <div>
            {
              item.data.category && (
                <p class="text-amber-400 text-sm font-medium tracking-wide uppercase mb-4 inline-block">
                  {item.data.category}
                </p>
              )
            }
            <h1
              class="savate-heavy text-4xl md:text-5xl lg:text-6xl text-white mb-4"
            >
              {item.data.title}
            </h1>
            <p class="text-xl md:text-2xl text-white/90 mb-6">
              {item.data.description}
            </p>
            <div class="flex items-center text-white/60 text-sm space-x-4">
              <span
                >{formatDate(item.data.date || new Date().toISOString())}</span
              >
              {
                item.data.author && (
                  <span class="flex items-center">
                    <span class="mx-2">â€¢</span>
                    <span>By {item.data.author}</span>
                  </span>
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Content Section */}
    <div class="container mx-auto px-4 sm:px-6 py-8 sm:py-12">
      <div
        class="prose prose-sm sm:prose-base md:prose-lg lg:prose-xl mx-auto max-w-4xl"
      >
        <div
          class="[&_img]:mx-auto [&_img]:w-full [&_img]:max-w-full [&_img]:rounded-lg"
        >
          <div
            class="[&>p:first-of-type]:first-letter:float-left [&>p:first-of-type]:first-letter:text-8xl [&>p:first-of-type]:first-letter:pr-3 [&>p:first-of-type]:first-letter:font-bold [&>p:first-of-type]:first-letter:text-amber-500 [&>p:first-of-type]:first-letter:font-[savate] [&>p]:w-[80%] [&>p]:mx-auto [&>p:has(>img)]:w-full"
          >
            <Content />
          </div>
        </div>
      </div>
      {
        item.data.tags && item.data.tags.length > 0 && (
          <div class="container mx-auto max-w-6xl px-4">
            <div class="mt-12 pt-8 border-t">
              <div class="flex flex-wrap gap-2">
                {item.data.tags.map((tag) => (
                  <a
                    href={`/tags/${tag}`}
                    class="px-3 py-1 bg-gray-100 rounded-sm hover:rounded-lg transition-all text-sm text-gray-700 hover:bg-gray-200 transition-colors"
                  >
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          </div>
        )
      }
    </div>

    <style>
      :global(.prose img) {
        @apply w-full h-auto rounded-lg my-4 md:my-6;
      }
      :global(.prose iframe) {
        @apply w-full aspect-video rounded-lg my-6 md:my-8;
      }
      :global(.prose a) {
        @apply text-amber-400 hover:text-amber-300 transition-colors;
      }
    </style>
  </article>
</BaseLayout>
