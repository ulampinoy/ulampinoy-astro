---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

// Get the current glossary term
const { slug } = Astro.params;
const allGlossaryItems = await getCollection("glossary");
const item = allGlossaryItems.find((term) => term.slug === slug);

if (!item) {
  return Astro.redirect("/glossary/not-found");
}

// Get all blog posts
const allBlogPosts = await getCollection("blog");

// Filter blog posts that contain the glossary term
const relatedArticles = allBlogPosts.filter((post) => {
  // Skip if no body content or draft
  if (!post.body || post.data.draft) return false;

  // Search for the glossary term in the post content
  const content = post.body.toLowerCase();
  const searchTerm = item.data.title.toLowerCase();
  return content.includes(searchTerm);
}) as CollectionEntry<"blog">[];

const { Content } = await item.render();

export async function getStaticPaths() {
  const glossary = await getCollection("glossary");
  return glossary.map((item) => ({
    params: { slug: item.slug },
  }));
}

// Format date for display
const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  return new Date(dateString).toLocaleDateString("en-US", options);
};
---

<BaseLayout title={item.data.title} description={item.data.description}>
  <article class="pt-32">
    {/* Hero Image Section - Full Bleed */}
    <div class="relative w-screen left-1/2 right-1/2 -mx-[50vw] -mt-16">
      <div class="relative h-[40vh] sm:h-[50vh] md:h-[60vh] w-screen">
        <img
          src={item.data.image || "/images/default-glossary.jpg"}
          alt={item.data.title}
          class="w-full h-full object-cover"
        />
        <div
          class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"
        >
        </div>
      </div>
      <div class="absolute inset-0 flex items-end">
        <div class="container mx-auto max-w-3xl px-4 w-full pb-8 md:pb-16">
          <div>
            {
              item.data.category && (
                <p class="text-amber-600 text-sm font-medium tracking-wide uppercase mb-4 inline-block">
                  {item.data.category}
                </p>
              )
            }
            <h1
              class="savate-heavy text-4xl md:text-5xl lg:text-6xl text-white mb-4"
            >
              {item.data.title}
            </h1>
            <p class="text-xl md:text-2xl text-white/95 mb-6">
              {item.data.description}
            </p>
            <div class="flex items-center text-white/60 text-sm space-x-4">
              <span>
                {
                  formatDate(
                    item.data.date
                      ? new Date(item.data.date).toISOString()
                      : new Date().toISOString()
                  )
                }
              </span>
              {
                item.data.author && (
                  <span class="flex items-center">
                    <span class="mx-2">â€¢</span>
                    <span>By {item.data.author}</span>
                  </span>
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Content Section */}
    <div class="container mx-auto px-4 sm:px-6 py-8 sm:py-12">
      <div class="max-w-4xl mx-auto">
        <div
          class="prose prose-sm sm:prose-base md:prose-lg lg:prose-xl mx-auto"
        >
          <div
            class="[&_img]:mx-auto [&_img]:w-full [&_img]:max-w-full [&_img]:rounded-lg"
          >
            <div
              class="[&>p:first-of-type]:first-letter:float-left [&>p:first-of-type]:first-letter:text-6xl md:[&>p:first-of-type]:first-letter:text-8xl [&>p:first-of-type]:first-letter:pr-2 [&>p:first-of-type]:first-letter:font-bold [&>p:first-of-type]:first-letter:text-amber-500 [&>p:first-of-type]:first-letter:font-[savate] [&>p]:w-full [&>p]:mx-auto [&>p:has(>img)]:w-full"
            >
              <!-- Render the content directly and we'll handle the heading in the template -->
              <Content />
            </div>
          </div>
        </div>

        {
          item.data.tags && item.data.tags.length > 0 && (
            <div class="mt-12 pt-8 border-t">
              <div class="flex flex-wrap gap-2">
                {item.data.tags.map((tag) => (
                  <a
                    href={`/tags/${tag}`}
                    class="px-3 py-1 bg-gray-100 rounded-sm hover:rounded-lg text-sm text-gray-700 hover:bg-amber-50 hover:text-amber-800 transition-colors border border-gray-200"
                  >
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </div>

    {/* Related Articles Section */}
    {
      relatedArticles.length > 0 ? (
        <div class="container mx-auto px-4 sm:px-6 py-8 sm:py-12">
          <div class="max-w-4xl mx-auto">
            <h2 class="text-2xl md:text-3xl mb-8 text-gray-900 dark:text-white">
              <strong>{item.data.title}</strong> in Articles
            </h2>
            <div class="space-y-6">
              {relatedArticles.map((post: CollectionEntry<"blog">) => (
                <a
                  href={`/blog/${post.slug}`}
                  class="group flex flex-col sm:flex-row overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-300"
                >
                  <div class="w-full sm:w-48 flex-shrink-0">
                    <img
                      src={post.data.image || "/images/default-blog.jpg"}
                      alt={post.data.title}
                      class="w-full h-48 sm:h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                  <div class="p-6 flex-1 flex flex-col">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white group-hover:text-amber-500 transition-colors">
                      {post.data.title}
                    </h3>
                    <p class="mt-2 text-gray-600 dark:text-gray-300 line-clamp-2">
                      {post.data.description}
                    </p>
                    <div class="mt-auto pt-4 text-sm text-gray-500 dark:text-gray-400">
                      {new Date(post.data.date).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>
      ) : null
    }

    <style>
      :global(.prose img) {
        @apply w-full h-auto rounded-lg my-4 md:my-6;
      }
      :global(.prose iframe) {
        @apply w-full aspect-video rounded-lg my-6 md:my-8;
      }
      :global(.prose a) {
        @apply text-amber-400 hover:text-amber-300 transition-colors;
      }

      :global(.prose p),
      :global(.prose ul),
      :global(.prose ol),
      :global(.prose h3) {
        @apply w-[100%] md:w-[80%] mx-auto mt-4;
      }

      :global(.prose h3) {
        @apply mt-8 md:mt-12;
      }
    </style>
  </article>
</BaseLayout>
