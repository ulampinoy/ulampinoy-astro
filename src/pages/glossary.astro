---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const allGlossaryItems = await getCollection("glossary");
const publishedGlossaryItems = allGlossaryItems.filter(
  (item) => !item.data.draft
);
const sortedItems = publishedGlossaryItems.sort((a, b) =>
  a.data.title.localeCompare(b.data.title)
);

// Define type for glossary items array
type GlossaryItem = (typeof sortedItems)[number];

// Create A-Z index
const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
const itemsByLetter: Record<string, GlossaryItem[]> = {};

// Initialize with all possible letters
alphabet.forEach((letter) => {
  itemsByLetter[letter] = [];
});
itemsByLetter["0-9"] = [];
itemsByLetter["#"] = [];

// Categorize items
for (const item of sortedItems) {
  const firstChar = item.data.title[0].toUpperCase();
  if (/[A-Z]/.test(firstChar)) {
    itemsByLetter[firstChar].push(item);
  } else if (/[0-9]/.test(firstChar)) {
    itemsByLetter["0-9"].push(item);
  } else {
    itemsByLetter["#"].push(item);
  }
}
---

<BaseLayout
  title="Glossary"
  description="A comprehensive guide to Filipino cooking ingredients and terms"
>
  {/* Hero Section */}
  <div class="bg-gradient-to-r from-amber-50 to-amber-100 py-16 md:py-24">
    <div class="container mx-auto max-w-6xl px-4">
      <div class="max-w-3xl mx-auto text-center">
        <h1
          class="savate-heavy text-4xl md:text-5xl lg:text-6xl text-gray-900 my-6"
        >
          Glossary of Filipino Ingredients
        </h1>
        <p class="text-lg md:text-xl text-gray-700">
          Discover the essential ingredients used in Filipino cuisine, from
          common pantry staples to unique regional specialties.
        </p>
      </div>
    </div>
  </div>

  {/* Main Content */}
  <div class="container mx-auto max-w-6xl px-4 py-12">
    {/* A-Z Index */}
    <div class="mb-12">
      <h2 class="text-2xl font-bold mb-6 text-gray-800">Browse A-Z</h2>
      <div class="flex flex-wrap gap-2 mb-8">
        {
          [...alphabet, "0-9", "#"].map((letter) => {
            const hasItems = itemsByLetter[letter]?.length > 0;
            return (
              <a
                href={`#letter-${letter}`}
                class={`w-10 h-10 flex items-center justify-center rounded-full text-sm font-medium ${
                  hasItems
                    ? "bg-amber-100 text-amber-800 hover:bg-amber-200"
                    : "bg-gray-100 text-gray-400 cursor-not-allowed"
                }`}
              >
                {letter}
              </a>
            );
          })
        }
      </div>
    </div>

    {/* Glossary Items */}
    <div class="space-y-12">
      {
        Object.entries(itemsByLetter).map(([letter, items]) => {
          if (!items || items.length === 0) return null;

          return (
            <div id={`letter-${letter}`} class="scroll-mt-20">
              <h3 class="text-3xl font-bold mb-6 text-gray-800 border-b pb-2 flex items-center">
                <span class="bg-amber-100 text-amber-800 w-12 h-12 rounded-full flex items-center justify-center mr-4">
                  {letter}
                </span>
              </h3>

              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
                {items.map((item: GlossaryItem) => (
                  <a
                    href={`/glossary/${item.slug}`}
                    class="group flex items-start p-4 bg-white rounded-lg border border-gray-200 hover:border-amber-300 hover:shadow-md transition-all"
                  >
                    {item.data.image && (
                      <img
                        src={item.data.image}
                        alt={item.data.title}
                        class="w-16 h-16 object-cover rounded-md mr-4 flex-shrink-0"
                        loading="lazy"
                      />
                    )}
                    <div>
                      <h4 class="font-semibold text-lg text-gray-900 group-hover:text-amber-600 transition-colors">
                        {item.data.title}
                      </h4>
                      {item.data.category && (
                        <span class="inline-block mt-1 px-2 py-0.5 text-xs font-medium bg-amber-100 text-amber-800 rounded-full">
                          {item.data.category}
                        </span>
                      )}
                    </div>
                  </a>
                ))}
              </div>
            </div>
          );
        })
      }
    </div>

    {/* Back to Top Button */}
    <button
      id="back-to-top"
      class="fixed bottom-8 right-8 bg-amber-500 text-white p-3 rounded-full shadow-lg opacity-0 invisible transition-all hover:bg-amber-600"
      aria-label="Back to top"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>
  </div>

  {/* JavaScript for Back to Top Button */}
  <script>
    // Back to top button
    const backToTopButton = document.getElementById("back-to-top");

    if (backToTopButton) {
      window.addEventListener("scroll", () => {
        if (window.pageYOffset > 300) {
          backToTopButton.classList.remove("opacity-0", "invisible");
          backToTopButton.classList.add("opacity-100", "visible");
        } else {
          backToTopButton.classList.remove("opacity-100", "visible");
          backToTopButton.classList.add("opacity-0", "invisible");
        }
      });

      backToTopButton.addEventListener("click", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      });
    }
  </script>
</BaseLayout>
