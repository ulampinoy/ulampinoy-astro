---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import FeaturedCarousel from "../components/FeaturedCarousel.astro";
import PopularIngredients from "../components/PopularIngredients.astro";

// Define types for blog post data
type BlogPostData = {
  title: string;
  description: string;
  date: Date | string; // Handle both Date and string dates
  draft?: boolean;
  hasVideo?: boolean;
  image?: string;
  whetter?: string;
  featured?: boolean;
  promoted?: boolean;
  tags?: string[];
  related?: string[];
  author?: string;
  category?: string;
  // Add any other properties that might be present in your blog posts
  [key: string]: any; // This allows for additional properties
};

// Function to safely parse dates
function parseDate(date: Date | string | undefined): Date {
  if (!date) return new Date();
  if (date instanceof Date) return date;
  return new Date(date);
}

// Define types for glossary item data
type GlossaryItemData = {
  title: string;
  description: string;
  date?: Date;
  draft?: boolean;
  tags?: string[];
  image?: string;
  author?: string;
  category?: string;
};

// Import Astro's types
/// <reference types="astro/client" />

// Define a simplified type for our content entries
type ContentEntry = {
  id: string;
  slug: string;
  collection: "blog" | "glossary";
  data: BlogPostData | GlossaryItemData;
  render: () => Promise<{ Content: any }>;
  body: string;
  compiledContent?: () => Promise<string>;
  filePath?: string;
};

// Define the base item type that can be either a blog post or glossary item
type BaseItem = ContentEntry & {
  data: BlogPostData | GlossaryItemData;
  // Add any additional properties specific to BaseItem
};

// Type guard to check if an item is a blog post
function isBlogPost(
  item: BaseItem
): item is BaseItem & { collection: "blog"; data: BlogPostData } {
  return item.collection === "blog";
}

// Type guard to check if an item is a glossary item
function isGlossaryItem(
  item: BaseItem
): item is BaseItem & { collection: "glossary"; data: GlossaryItemData } {
  return item.collection === "glossary";
}

// Get all blog posts that are not drafts
const posts = (
  await getCollection("blog", ({ data }) => {
    return data.draft !== true;
  })
).map((post) => {
  // Ensure date is a Date object
  const postDate = parseDate(post.data.date);

  // Create a properly typed post object
  const typedPost: ContentEntry = {
    ...post,
    collection: "blog" as const,
    data: {
      ...post.data,
      date: postDate,
      // Ensure all required properties have default values
      title: post.data.title || "",
      description: post.data.description || "",
      tags: post.data.tags || [],
      related: post.data.related || [],
      // Add any other required properties with defaults
      draft: post.data.draft ?? false,
      hasVideo: post.data.hasVideo ?? false,
      featured: post.data.featured ?? false,
      promoted: post.data.promoted ?? false,
      whetter: post.data.whetter || "",
    } as BlogPostData,
    // Ensure required methods exist
    render: post.render || (async () => ({ Content: "" })),
    body: post.body || "",
    compiledContent: (post as any).compiledContent || (async () => ""),
  };

  return typedPost;
});

// Get all glossary items
const glossaryItems = (await getCollection("glossary")).map((item) => ({
  ...item,
  collection: "glossary" as const,
  data: {
    ...item.data,
    date: item.data.date || new Date(),
  },
}));

// Log the posts for debugging
import { writeFileSync } from "fs";
const debugOutput = [];

debugOutput.push("All blog posts:");
posts.forEach((post) => {
  debugOutput.push(`- ${post.data.date} - ${post.slug} - ${post.data.title}`);
});

// Combine posts and glossary items into one array with proper typing
const allItems: BaseItem[] = [...posts, ...glossaryItems];

// Helper function to get date from item
const getItemDate = (item: any) => {
  if (item.data.date) return new Date(item.data.date);
  return new Date();
};

// Sort items by date (newest first)
const sortedItems = [...posts, ...glossaryItems].sort((a, b) => {
  const dateA = parseDate(a.data.date);
  const dateB = parseDate(b.data.date);
  return dateB.getTime() - dateA.getTime();
});

// Log the sorted items for debugging
debugOutput.push("\nAll sorted items:");
sortedItems.forEach((item) => {
  debugOutput.push(
    `- ${getItemDate(item).toISOString().split("T")[0]} - ${item.collection} - ${item.slug} - ${item.data.title}`
  );
});

// Write to debug file
writeFileSync("debug-posts.log", debugOutput.join("\n"));

// Get all featured posts (only those with featured: true)
let featuredPosts = posts.filter((post) => post.data.featured === true);

// Get the new post if it exists
const newPost = sortedItems.find(
  (item) =>
    item.collection === "blog" && item.slug === "talaba-adventure-alaminos"
) as BaseItem | undefined;

// Only add new post to featured if it's explicitly marked as featured
if (
  newPost &&
  isBlogPost(newPost) &&
  newPost.data.featured === true &&
  !featuredPosts.some((post) => post.slug === "talaba-adventure-alaminos")
) {
  featuredPosts = [newPost, ...featuredPosts];
}

// Get promoted post or first post as featured
const promotedPost = posts.find(
  (post) => isBlogPost(post) && post.data.promoted
);
const firstBlogPost = sortedItems.find((item) => item.collection === "blog");

// Create a safe fallback post in case no posts are found
const fallbackPost: BaseItem = {
  id: "fallback",
  slug: "fallback",
  collection: "blog",
  data: {
    title: "No posts found",
    description: "Please check back later for new content.",
    date: new Date(),
    draft: false,
    tags: [],
    related: [],
  },
  render: async () => ({ Content: "" }),
  body: "",
};

const featuredPost = (promotedPost ||
  firstBlogPost ||
  fallbackPost) as BaseItem;

// Get secondary posts (top 6 items that are blog posts)
const secondaryPosts = sortedItems
  .filter(
    (item): item is BaseItem & { collection: "blog"; data: BlogPostData } =>
      isBlogPost(item)
  )
  .slice(0, 4);

// Get remaining posts for "More Articles" section (exclude posts already shown in What's New)
const remainingPosts = sortedItems
  .filter(
    (item): item is ContentEntry & { collection: "blog"; data: BlogPostData } =>
      item.collection === "blog" &&
      !secondaryPosts.some((post) => post.slug === item.slug)
  )
  .map((item) => ({
    ...item,
    data: {
      ...item.data,
      // Ensure all required properties are present
      title: item.data.title || "",
      description: item.data.description || "",
      date: parseDate(item.data.date),
      tags: item.data.tags || [],
      related: item.data.related || [],
      // Ensure other optional properties have defaults
      draft: item.data.draft ?? false,
      hasVideo: item.data.hasVideo ?? false,
      featured: item.data.featured ?? false,
      promoted: item.data.promoted ?? false,
      whetter: item.data.whetter || "",
    },
  }));
---

<BaseLayout
  title="UlamPinoy"
  description="Filipino home cooking, recipes and video recipes"
>
  <main>
    <section class="bg-white py-8 md:pt-16">
      <div class="w-full max-w-6xl mx-auto px-4 py-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* Featured Story - Takes 2 columns */}
          <div
            class="md:col-span-2 lg:col-span-2 flex flex-col h-full -mx-4 md:mx-0"
          >
            <a
              href={`/blog/${featuredPost.slug}`}
              class="group flex-1 flex flex-col"
            >
              <div
                class="relative flex-1 overflow-hidden md:rounded-sm hover:md:rounded-lg transition-all"
              >
                <img
                  src={featuredPost.data.image}
                  alt={featuredPost.data.title}
                  class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                />
                <div
                  class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent"
                >
                  <div
                    class="absolute bottom-0 w-full px-4 md:px-10 pb-6 md:pb-10"
                  >
                    <div class="max-w-6xl mx-auto">
                      {
                        isBlogPost(featuredPost) &&
                          featuredPost.data.whetter && (
                            <p class="text-sm text-amber-400 mb-2 font-medium tracking-wide uppercase">
                              {featuredPost.data.whetter}
                            </p>
                          )
                      }
                      <h1
                        class="savate-bold text-3xl md:text-4xl font-bold text-white group-hover:text-amber-400 transition-colors"
                      >
                        {featuredPost.data.title}
                      </h1>
                      <p
                        class="text-base sm:text-lg text-white/90 mt-3 line-clamp-3"
                      >
                        {featuredPost.data.description}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </a>
          </div>

          {/* Right Column with What's New */}
          <div class="lg:col-span-1">
            <h3 class="text-lg font-semibold mb-4">What's New</h3>
            <div class="grid grid-cols-1 gap-4">
              {
                sortedItems
                  .filter((item) => !item.data.draft) // Filter out draft items
                  .slice(0, 4)
                  .map((item) => (
                    <a
                      href={
                        item.collection === "blog"
                          ? `/blog/${item.slug}`
                          : `/glossary/${item.slug}`
                      }
                      class="group grid grid-cols-2 gap-4 pb-2"
                    >
                      <div class="aspect-[4/3] overflow-hidden rounded-sm hover:rounded-lg transition-all">
                        <img
                          src={
                            item.data.image || "/images/default-glossary.jpg"
                          }
                          alt={item.data.title}
                          class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                        />
                      </div>
                      <div>
                        {isBlogPost(item) && item.data.whetter && (
                          <p class="text-xs font-medium tracking-wider text-amber-500 mb-1 uppercase">
                            {item.data.whetter}
                          </p>
                        )}
                        <h2 class="savate-bold text-xl group-hover:text-amber-500 transition-colors line-clamp-1">
                          {item.data.title}
                        </h2>
                        <p class="text-sm text-gray-700 mt-2 line-clamp-3">
                          {item.data.description}
                        </p>
                      </div>
                    </a>
                  ))
              }
            </div>
          </div>

          {/* Remaining Secondary Stories */}
          <div class="md:col-span-2 lg:col-span-3">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
              {
                secondaryPosts.slice(1).map((post) => (
                  <a href={`/blog/${post.slug}`} class="group pb-2">
                    <div class="aspect-[4/3] overflow-hidden rounded-sm hover:rounded-lg transition-all">
                      <img
                        src={post.data.image}
                        alt={post.data.title}
                        class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                      />
                    </div>
                    <div class="mt-4">
                      <p class="text-xs font-medium tracking-wider text-amber-500 mb-1 uppercase">
                        {post.data.whetter}
                      </p>
                      <h2 class="savate-bold text-2xl group-hover:text-amber-500 transition-colors">
                        {post.data.title}
                      </h2>
                      <p class="text-sm text-gray-700 mt-2 line-clamp-2">
                        {post.data.description}
                      </p>
                    </div>
                  </a>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </section>

    {/* Latest Videos Section */}
    <section class="py-12 bg-gradient-to-br from-amber-50 to-white">
      <div class="container mx-auto max-w-6xl px-4">
        <div class="flex justify-between items-center mb-8">
          <h2 class="text-2xl font-bold">Latest Videos</h2>
          <a
            href="/videos"
            class="text-amber-500 hover:text-yellow-700 font-medium"
          >
            View all videos →
          </a>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {
            posts
              .filter((post) => post.data.hasVideo && !post.data.draft)
              .sort(
                (a, b) =>
                  new Date(b.data.date).getTime() -
                  new Date(a.data.date).getTime()
              )
              .slice(0, 4)
              .map((post) => (
                <a href={`/blog/${post.slug}`} class="group">
                  <div class="aspect-video overflow-hidden rounded-sm hover:rounded-lg transition-all mb-3 relative">
                    <img
                      src={post.data.image}
                      alt={post.data.title}
                      class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                    />
                    {/* Play button overlay */}
                    <div class="absolute bottom-2 left-2 z-10">
                      <div class="bg-black/70 rounded-full p-2 group-hover:bg-amber-500 transition-colors">
                        <svg
                          class="w-5 h-5 text-white"
                          fill="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path d="M8 5v14l11-7z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                  <h3 class="savate-bold text-lg group-hover:text-amber-500 transition-colors line-clamp-2">
                    {post.data.title}
                  </h3>
                </a>
              ))
          }
        </div>
      </div>
    </section>

    {/* Featured Posts Carousel */}
    {
      featuredPosts.length > 0 && (
        <section>
          <FeaturedCarousel posts={featuredPosts} />
        </section>
      )
    }

    {/* More Articles Section */}
    <section class="bg-gray-50 py-12">
      <div class="container mx-auto max-w-6xl px-4">
        <div class="flex justify-between items-center mb-8">
          <h2 class="text-2xl font-bold">More Articles</h2>
          <a
            href="/articles"
            class="text-amber-500 hover:text-yellow-700 font-medium"
          >
            See all articles →
          </a>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          {
            remainingPosts.slice(1, 7).map((post) => (
              <a href={`/blog/${post.slug}`} class="group pb-2">
                <div class="aspect-[16/9] overflow-hidden rounded-sm hover:rounded-lg transition-all">
                  <img
                    src={post.data.image}
                    alt={post.data.title}
                    class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                  />
                </div>
                <div class="mt-4">
                  <h3 class="savate-bold text-2xl group-hover:text-amber-500 transition-colors">
                    {post.data.title}
                  </h3>
                  <p class="text-sm text-gray-700 mt-2 line-clamp-2">
                    {post.data.description}
                  </p>
                </div>
              </a>
            ))
          }
        </div>
      </div>
    </section>

    <PopularIngredients />
  </main>
</BaseLayout>
