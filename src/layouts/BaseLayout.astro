---
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import "../styles/main.css";

interface Props {
  title: string;
  description: string;
  showBackLink?: boolean;
  backgroundImage?: string;
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
}

const { 
  title, 
  description, 
  showBackLink = true, 
  backgroundImage,
  author,
  publishedTime,
  modifiedTime 
} = Astro.props;
const currentPath = Astro.url.pathname;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&family=Noto+Sans+Tagalog:wght@400&family=Noto+Serif:ital,wght@0,100..900;1,100..900&family=Savate:wght@200..900&display=swap" rel="stylesheet">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    {/* Open Graph / Facebook */}
    <meta property="og:type" content="article" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {backgroundImage && <meta property="og:image" content={new URL(backgroundImage, Astro.site).toString()} />}
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="UlamPinoy" />
    
    {/* Article specific meta */}
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {author && <meta property="article:author" content={author} />}
    
    {/* Twitter */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {backgroundImage && <meta name="twitter:image" content={new URL(backgroundImage, Astro.site).toString()} />}
    {author && <meta name="twitter:creator" content={author} />}
    
    {/* Additional Meta */}
    <meta name="theme-color" content="#f59e0b" />
    <link rel="canonical" href={Astro.url.href} />
    
    {/* Structured Data */}
    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": title,
        "description": description,
        ...(author && { "author": { "@type": "Person", "name": author } }),
        ...(publishedTime && { "datePublished": publishedTime }),
        ...(modifiedTime && { "dateModified": modifiedTime }),
        ...(backgroundImage && { "image": new URL(backgroundImage, Astro.site).toString() }),
        "publisher": {
          "@type": "Organization",
          "name": "UlamPinoy",
          "logo": {
            "@type": "ImageObject",
            "url": new URL("/logo.png", Astro.site).toString()
          }
        }
      })}
    </script>
  </head>
  <body class="relative min-h-screen">
    {backgroundImage && (
      <div 
        class="fixed inset-0 -z-10 bg-cover bg-center bg-no-repeat opacity-10"
        style={`background-image: url(${backgroundImage})`}
      >
        <div class="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>
      </div>
    )}
    <slot />
    <div class="container mx-auto max-w-6xl">
      <Navigation currentPath={currentPath} />
      {
        showBackLink && currentPath !== "/" && (
          <div class="px-4 py-12">
            <a
              href="/"
              class="inline-flex items-center text-amber-500 hover:text-amber-600 transition-colors"
              aria-label="Go back to home"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"
                />
              </svg>
              Go back
            </a>
          </div>
        )
      }
    </div>
    <Footer />
    
    {/* Lightbox overlay */}
    <div id="lightbox" class="fixed inset-0 z-50 items-center justify-center bg-black/90 hidden p-4">
      <div id="lightbox-swipe-area" class="relative w-full h-full flex items-center justify-center">
        {/* Close button */}
        <button 
          id="lightbox-close" 
          class="absolute top-4 right-4 z-50 text-white text-3xl hover:opacity-75 transition-opacity" 
          aria-label="Close"
        >
          &times;
        </button>
        
        {/* Navigation buttons */}
        <button 
          id="lightbox-prev" 
          class="absolute left-4 top-1/2 -translate-y-1/2 z-50 text-white text-4xl hover:opacity-75 transition-opacity p-4" 
          aria-label="Previous image"
        >
          &larr;
        </button>
        
        <button 
          id="lightbox-next" 
          class="absolute right-4 top-1/2 -translate-y-1/2 z-50 text-white text-4xl hover:opacity-75 transition-opacity p-4" 
          aria-label="Next image"
        >
          &rarr;
        </button>
        
        {/* Image and caption container */}
        <div class="relative max-w-4xl w-full max-h-[90vh] flex flex-col items-center justify-center">
          <div class="relative w-full flex-1 flex items-center justify-center">
            <img 
              id="lightbox-img" 
              class="max-h-[80vh] max-w-full object-contain" 
              alt="" 
              draggable="false"
            />
          </div>
          
          {/* Caption and counter */}
          <div class="w-full mt-4 text-center">
            <div id="lightbox-caption" class="text-white text-base mb-2 px-4"></div>
            <div class="text-white/70 text-sm">
              <span id="lightbox-current">1</span> / <span id="lightbox-total">1</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Lightbox elements with type assertions
        const lightboxEl = document.getElementById('lightbox') as HTMLElement | null;
        const lightboxImgEl = document.getElementById('lightbox-img') as HTMLImageElement | null;
        const lightboxClose = document.getElementById('lightbox-close') as HTMLElement | null;
        const lightboxPrev = document.getElementById('lightbox-prev') as HTMLElement | null;
        const lightboxNext = document.getElementById('lightbox-next') as HTMLElement | null;
        const lightboxCurrentEl = document.getElementById('lightbox-current') as HTMLElement | null;
        const lightboxTotalEl = document.getElementById('lightbox-total') as HTMLElement | null;
        const lightboxSwipeArea = document.getElementById('lightbox-swipe-area') as HTMLElement | null;
        
        if (!lightboxEl || !lightboxImgEl || !lightboxClose || !lightboxPrev || 
            !lightboxNext || !lightboxCurrentEl || !lightboxTotalEl || !lightboxSwipeArea) {
          console.error('Lightbox elements not found');
          return;
        }
        
        let currentIndex = 0;
        let images: HTMLImageElement[] = [];
        let isInitialized = false;
        let touchStartX = 0;
        let touchEndX = 0;
        const SWIPE_THRESHOLD = 50;

        // Throttle function for performance
        const throttle = <T extends (...args: any[]) => any>(func: T, limit: number): ((...args: Parameters<T>) => void) => {
          let inThrottle = false;
          return function(this: any, ...args: Parameters<T>): void {
            if (!inThrottle) {
              func.apply(this, args);
              inThrottle = true;
              setTimeout(() => inThrottle = false, limit);
            }
          };
        };

        // Navigation functions
        function navigate(direction: number) {
          currentIndex = (currentIndex + direction + images.length) % images.length;
          updateLightboxImage();
        }

        // Update counter
        function updateCounter() {
          lightboxCurrentEl!.textContent = (currentIndex + 1).toString();
          lightboxTotalEl!.textContent = images.length.toString();
        }

        // Open lightbox with image at index
        function openLightbox(index: number) {
          if (images.length === 0 || !lightboxEl || !lightboxImgEl) return;
          currentIndex = (index + images.length) % images.length;
          updateLightboxImage();
          lightboxEl.classList.remove('hidden');
          lightboxEl.classList.add('flex');
          document.body.style.overflow = 'hidden';
        }

        // Close lightbox
        function closeLightbox() {
          if (lightboxEl) {
            lightboxEl.classList.add('hidden');
            lightboxEl.classList.remove('flex');
            document.body.style.overflow = '';
          }
        }

        // Update the lightbox with current image
        function updateLightboxImage() {
          const img = images[currentIndex];
          const captionEl = document.getElementById('lightbox-caption');
          
          if (lightboxImgEl) {
            lightboxImgEl.src = img.src;
            lightboxImgEl.alt = img.alt || '';
            
            // Update caption if it exists
            if (captionEl) {
              // Use the image's alt text as caption if available
              captionEl.textContent = img.alt || '';
              // Show or hide caption container based on whether there's a caption
              captionEl.style.display = img.alt ? 'block' : 'none';
            }
            
            updateCounter();
          }
        }

        // Check if element is in viewport
        function isInViewport(element: HTMLElement): boolean {
          const rect = element.getBoundingClientRect();
          return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
          );
        }

        // Initialize lightbox for visible article images
        function initLightbox() {
          if (isInitialized) return;

          // Collect all images in the article that aren't hero images
          const article = document.querySelector('article');
          if (!article) return;
          
          // First, get the article's main hero image (first image in the article)
          const heroImage = article.querySelector('img:first-of-type');
          
          // Get all images in the article content, excluding those with data-no-lightbox
          const allImages = Array.from(article.querySelectorAll('img:not([data-no-lightbox])'));
          
          // Filter out the hero image and any images inside hero elements
          images = allImages.filter((img): img is HTMLImageElement => {
            // Type guard to ensure we're working with HTMLImageElement
            if (!(img instanceof HTMLImageElement)) return false;
            
            // Skip the hero image
            if (img === heroImage) return false;
            
            // Skip images inside elements with 'hero' in their class
            if (img.closest('[class*="hero" i]')) return false;
            
            // Only include images that are large enough
            const rect = img.getBoundingClientRect();
            return rect.width > 100 && rect.height > 100;
          });

          // Update total counter
          lightboxTotalEl!.textContent = images.length.toString();
          if (images.length === 0) return;
          
          // Add click handlers to images
          images.forEach((img, index) => {
            if (img.hasAttribute('data-lightbox-initialized')) return;
            
            img.style.cursor = 'zoom-in';
            img.setAttribute('data-lightbox-initialized', 'true');
            
            const onClick = (e: MouseEvent) => {
              e.preventDefault();
              e.stopPropagation();
              openLightbox(index);
            };
            
            img.addEventListener('click', onClick);
            
            // Handle images inside links
            const parentLink = img.closest('a');
            if (parentLink) {
              parentLink.style.cursor = 'zoom-in';
              parentLink.addEventListener('click', (e) => {
                if (e.target === img || e.target === parentLink) {
                  onClick(e);
                }
              });
            }
          });

          isInitialized = true;
        }

        // Handle swipe gestures
        function handleSwipeStart(e: TouchEvent) {
          touchStartX = e.touches[0].clientX;
        }

        function handleSwipeMove(e: TouchEvent) {
          touchEndX = e.touches[0].clientX;
        }

        function handleSwipeEnd() {
          if (Math.abs(touchStartX - touchEndX) < SWIPE_THRESHOLD) return;
          
          if (touchStartX > touchEndX) {
            navigate(1);
          } else {
            navigate(-1);
          }
          
          touchStartX = 0;
          touchEndX = 0;
        }

        function handleSwipe() {
          const diff = touchStartX - touchEndX;
          if (Math.abs(diff) > SWIPE_THRESHOLD) {
            if (diff > 0) navigate(1);
            else navigate(-1);
          }
        }

        // Touch event handlers for swipe gestures
        lightboxSwipeArea!.addEventListener('touchstart', (e: TouchEvent) => {
          touchStartX = e.touches[0].clientX;
        });

        lightboxSwipeArea!.addEventListener('touchmove', (e: TouchEvent) => {
          e.preventDefault();
          touchEndX = e.touches[0].clientX;
        });

        lightboxSwipeArea!.addEventListener('touchend', () => {
          if (touchStartX - touchEndX > SWIPE_THRESHOLD) {
            // Swipe left - go to next
            navigate(1);
          } else if (touchEndX - touchStartX > SWIPE_THRESHOLD) {
            // Swipe right - go to previous
            navigate(-1);
          }
        });

        // Event delegation for lightbox controls
        lightboxEl!.addEventListener('click', (e: MouseEvent) => {
          const target = e.target as HTMLElement;
          
          // Handle lightbox close
          if (target === lightboxEl || target === lightboxClose) {
            closeLightbox();
          }
          // Handle navigation
          else if (target === lightboxPrev) {
            e.stopPropagation();
            navigate(-1);
          }
          else if (target === lightboxNext) {
            e.stopPropagation();
            navigate(1);
          }
        });

        // Keyboard navigation
        document.addEventListener('keydown', (e: KeyboardEvent) => {
          if (!lightboxEl.classList.contains('hidden')) {
            switch (e.key) {
              case 'Escape':
                closeLightbox();
                break;
              case 'ArrowLeft':
                navigate(-1);
                break;
              case 'ArrowRight':
                navigate(1);
                break;
            }
          }
        });

        // Initialize lightbox when the document is ready
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
          // Initialize immediately if the document is already loaded
          initLightbox();
        } else {
          // Wait for the document to be fully loaded
          window.addEventListener('load', initLightbox);
        }
      });
    </script>
  </body>
</html>
