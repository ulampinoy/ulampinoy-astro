---
const { posts } = Astro.props;

// Filter for only video spotlight posts
const spotlightPosts = posts
  .filter(post => post.data.spotlight === true && post.data.hasVideo === true)
  .sort((a, b) => (a.data.spotlightOrder || 0) - (b.data.spotlightOrder || 0))
  .slice(0, 4);
---

<div class="relative bg-zinc-900">
  {spotlightPosts.length > 0 && (
    <div class="relative h-[400px] md:h-[500px] lg:h-[600px] overflow-hidden">
      {spotlightPosts.map((post, index) => (
        <a
          href={`/videos/${post.slug.split('/').pop()}`}
          class="absolute inset-0 w-full h-full transition-transform duration-700 ease-out cursor-pointer group"
          id={`slide-${index}`}
          data-slide-index={index}
        >
          <div class="relative h-full">
            <img
              src={post.data.image}
              alt={post.data.title}
              class="w-full h-full object-cover"
            />
           <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent">
              <div class="absolute bottom-0 left-0 right-0 p-6 md:p-8">
                <div class="flex items-start space-x-6">
                  {/* Play Button */}
                  <div class="flex-shrink-0">
                    <div class="w-16 h-16 md:w-20 md:h-20 rounded-full bg-yellow-500 flex items-center justify-center group-hover:bg-yellow-400 transition-colors">
                      <svg 
                        class="w-8 h-8 md:w-10 md:h-10 text-black ml-1" 
                        fill="currentColor" 
                        viewBox="0 0 24 24"
                      >
                        <path d="M8 5v14l11-7z" />
                      </svg>
                    </div>
                  </div>
                  {/* Title and Description */}
                  <div class="flex-1">
                    <h2 class="text-xl md:text-4xl font-bold text-white group-hover:text-yellow-400 transition-colors">
                      {post.data.title}
                    </h2>
                    <p class="text-zinc-300 line-clamp-2 mt-2">
                      {post.data.description}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </a>
      ))}
    </div>

    <!-- Navigation Arrows -->
    <button
      class="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 text-white hover:bg-black/70 z-10"
      id="prev-btn"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"
        />
      </svg>
    </button>
    <button
      class="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 text-white hover:bg-black/70 z-10"
      id="next-btn"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"
        />
      </svg>
    </button>
  )}
</div>

<script>
  let currentSlide = 0;
  const slides = document.querySelectorAll('[id^="slide-"]');
  const prevBtn = document.getElementById("prev-btn");
  const nextBtn = document.getElementById("next-btn");

  function updateSlides() {
    slides.forEach((slide, index) => {
      (slide as HTMLElement).style.transform = `translateX(${(index - currentSlide) * 100}%)`;
      (slide as HTMLElement).style.zIndex = index === currentSlide ? "1" : "0";
    });
  }

  prevBtn?.addEventListener("click", (e) => {
    e.stopPropagation();
    currentSlide = (currentSlide - 1 + slides.length) % slides.length;
    updateSlides();
  });

  nextBtn?.addEventListener("click", (e) => {
    e.stopPropagation();
    currentSlide = (currentSlide + 1) % slides.length;
    updateSlides();
  });

  function startAutoAdvance() {
    return setInterval(() => {
      currentSlide = (currentSlide + 1) % slides.length;
      updateSlides();
    }, 8000); // Change slides every 8 seconds
  }

  // Initialize
  updateSlides();
  let autoAdvance = startAutoAdvance();

  // Cleanup
  document.addEventListener("astro:beforeload", () => {
    clearInterval(autoAdvance);
  });
</script>